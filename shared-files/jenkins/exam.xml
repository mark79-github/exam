<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1284.v2fe8ed4573d4">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2125.vddb_a_44a_d605e"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2125.vddb_a_44a_d605e">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.37.0">
      <projectUrl>http://192.168.99.202:3000/vagrant/exam/</projectUrl>
      <displayName></displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <com.cloudbees.jenkins.GitHubPushTrigger plugin="github@1.37.0">
          <spec></spec>
        </com.cloudbees.jenkins.GitHubPushTrigger>
        <hudson.triggers.SCMTrigger>
          <spec></spec>
          <ignorePostCommitHooks>false</ignorePostCommitHooks>
        </hudson.triggers.SCMTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3651.ve2e99a_4f4a_e5">
    <script>pipeline 
{
    agent 
    {
        label &apos;docker&apos;
    }
    environment 
    {
        DOCKERHUB_CREDENTIALS=credentials(&apos;docker-hub&apos;)
    }
    stages 
    {
        stage(&apos;Clone repository&apos;) 
        {
            steps 
            {
                git branch: &apos;main&apos;, url: &apos;http://192.168.99.202:3000/vagrant/exam&apos;
            }
        }
        stage(&apos;Build and run development&apos;)
        {
            steps
            {
                sh &apos;docker compose -f docker-compose.yml down --rmi all&apos;
                sh &apos;docker compose -f docker-compose.yml up -d&apos;
            }
        }
        stage(&apos;Test&apos;)
        {
            steps
            {
                script 
                {
                    echo &apos;Wait 10 seconds&apos;
                    sh &apos;sleep 10&apos;
                    
                    echo &apos;Test #1 - reachability&apos;
                    sh &apos;echo $(curl --write-out &quot;%{http_code}&quot; --silent --output /dev/null http://localhost:8080) | grep 200&apos;

                    echo &apos;Wait 10 seconds&apos;
                    sh &apos;sleep 10&apos;

                    echo &apos;Test #2&apos;
                    sh &apos;echo $(curl --silent http://localhost:8080) | grep $(cat /home/vagrant/workspace/exam/client/code/app.dat)&apos;
                }
            }
        }
        stage(&apos;Login&apos;)
        {
            steps 
            {
                sh &apos;echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin&apos;
            }
        }
        stage(&apos;Image push&apos;) 
        {
            steps 
            {
                sh &apos;docker image tag storage $DOCKERHUB_CREDENTIALS_USR/storage&apos;
                sh &apos;docker image tag client $DOCKERHUB_CREDENTIALS_USR/client&apos;
                sh &apos;docker image tag generator $DOCKERHUB_CREDENTIALS_USR/generator&apos;
                sh &apos;docker image push $DOCKERHUB_CREDENTIALS_USR/storage&apos;
                sh &apos;docker image push $DOCKERHUB_CREDENTIALS_USR/client&apos;
                sh &apos;docker image push $DOCKERHUB_CREDENTIALS_USR/generator&apos;
            }
        }
        stage(&apos;Clean up development&apos;)
        {
            steps
            {
                sh &apos;docker compose -f docker-compose.yml down&apos;
            }
        }
        stage(&apos;Deploy&apos;)
        {
            steps
            {
                 sh &apos;docker compose -f docker-compose-deploy.yml down&apos;
                 sh &apos;docker compose -f docker-compose-deploy.yml up -d&apos;
            }
        }
    }
    post 
    { 
        always 
        { 
            cleanWs()
        }
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>
